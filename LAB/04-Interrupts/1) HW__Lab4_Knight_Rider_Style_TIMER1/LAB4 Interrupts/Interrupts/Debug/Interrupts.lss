
Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000262  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800106  00800106  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000acc  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072e  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000717  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007495  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000185  00000000  00000000  0000928d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00009412  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000028e1  00000000  00000000  0000946a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	a5 c0       	rjmp	.+330    	; 0x180 <__vector_13>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	3f d0       	rcall	.+126    	; 0x11a <main>
  9c:	e0 c0       	rjmp	.+448    	; 0x25e <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <GPIO_config_output>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	 *reg_name = *reg_name | (1<<pin_num); // Set bit (or)
  a0:	fc 01       	movw	r30, r24
  a2:	40 81       	ld	r20, Z
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <GPIO_config_output+0xe>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <GPIO_config_output+0xa>
  b2:	24 2b       	or	r18, r20
  b4:	20 83       	st	Z, r18
  b6:	08 95       	ret

000000b8 <GPIO_config_input_pullup>:
  b8:	fc 01       	movw	r30, r24
  ba:	80 81       	ld	r24, Z
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <GPIO_config_input_pullup+0xe>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <GPIO_config_input_pullup+0xa>
  ca:	92 2f       	mov	r25, r18
  cc:	90 95       	com	r25
  ce:	89 23       	and	r24, r25
  d0:	80 83       	st	Z, r24
  d2:	80 81       	ld	r24, Z
  d4:	81 81       	ldd	r24, Z+1	; 0x01
  d6:	28 2b       	or	r18, r24
  d8:	21 83       	std	Z+1, r18	; 0x01
  da:	08 95       	ret

000000dc <GPIO_write_low>:
  dc:	fc 01       	movw	r30, r24
  de:	90 81       	ld	r25, Z
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <GPIO_write_low+0xe>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <GPIO_write_low+0xa>
  ee:	20 95       	com	r18
  f0:	29 23       	and	r18, r25
  f2:	20 83       	st	Z, r18
  f4:	08 95       	ret

000000f6 <GPIO_toggle>:
/*--------------------------------------------------------------------*/
/* GPIO_toggle */

void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num); // Toggle bit (xor)
  f6:	fc 01       	movw	r30, r24
  f8:	40 81       	ld	r20, Z
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <GPIO_toggle+0xe>
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <GPIO_toggle+0xa>
 108:	24 27       	eor	r18, r20
 10a:	20 83       	st	Z, r18
 10c:	08 95       	ret

0000010e <GPIO_read>:
/*--------------------------------------------------------------------*/
/* GPIO_read */
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	uint8_t result = 0; // Initializing result with 0
	if (*reg_name == pin_num) // If PIN is pressed
 10e:	fc 01       	movw	r30, r24
 110:	90 81       	ld	r25, Z
	{
		result = 1; // Value of result becomes 1 if PD0 is pressed.
	}
	return result; // Return the value stored in result (1 OR 0)
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	96 13       	cpse	r25, r22
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 95       	ret

0000011a <main>:
int main(void)
{
    /* Configuration of LED(s) */
	
	//MAKING LED_D2 AS AN OUTPUT PIN 
    GPIO_config_output(&DDRB, LED_D2);
 11a:	64 e0       	ldi	r22, 0x04	; 4
 11c:	84 e2       	ldi	r24, 0x24	; 36
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	bf df       	rcall	.-130    	; 0xa0 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D2);
 122:	64 e0       	ldi	r22, 0x04	; 4
 124:	85 e2       	ldi	r24, 0x25	; 37
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	d9 df       	rcall	.-78     	; 0xdc <GPIO_write_low>
		
	// WRITE YOUR CODE HERE
	
	//MAKING LED_D1 AS AN OUTPUT PIN 
	GPIO_config_output(&DDRB, LED_D1);
 12a:	65 e0       	ldi	r22, 0x05	; 5
 12c:	84 e2       	ldi	r24, 0x24	; 36
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	b7 df       	rcall	.-146    	; 0xa0 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D1);
 132:	65 e0       	ldi	r22, 0x05	; 5
 134:	85 e2       	ldi	r24, 0x25	; 37
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	d1 df       	rcall	.-94     	; 0xdc <GPIO_write_low>
	
	//MAKING LED_D3 AS AN OUTPUT PIN 
	GPIO_config_output(&DDRB, LED_D3);
 13a:	63 e0       	ldi	r22, 0x03	; 3
 13c:	84 e2       	ldi	r24, 0x24	; 36
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	af df       	rcall	.-162    	; 0xa0 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D3);
 142:	63 e0       	ldi	r22, 0x03	; 3
 144:	85 e2       	ldi	r24, 0x25	; 37
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	c9 df       	rcall	.-110    	; 0xdc <GPIO_write_low>
	
	//MAKING LED_D4 AS AN OUTPUT PIN 
	GPIO_config_output(&DDRB, LED_D4);
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	84 e2       	ldi	r24, 0x24	; 36
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	a7 df       	rcall	.-178    	; 0xa0 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D4);
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	85 e2       	ldi	r24, 0x25	; 37
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	c1 df       	rcall	.-126    	; 0xdc <GPIO_write_low>
	
	//PDO as a BUTTON
	GPIO_config_input_pullup(&DDRD, BTN);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	8a e2       	ldi	r24, 0x2A	; 42
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	ab df       	rcall	.-170    	; 0xb8 <GPIO_config_input_pullup>
 162:	e1 e8       	ldi	r30, 0x81	; 129
  TIM0_overflow_interrupt_enable();*/
	

    /* Configuration of 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
    TIM1_overflow_1s();
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8c 7f       	andi	r24, 0xFC	; 252
 16a:	80 83       	st	Z, r24
 16c:	80 81       	ld	r24, Z
 16e:	84 60       	ori	r24, 0x04	; 4
 170:	80 83       	st	Z, r24
 172:	ef e6       	ldi	r30, 0x6F	; 111
    TIM1_overflow_interrupt_enable();
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	80 83       	st	Z, r24
 17c:	78 94       	sei
	TIM2_overflow_16ms();
	TIM2_overflow_interrupt_enable();*/
	

    // Enables interrupts by setting the global interrupt mask
    sei();
 17e:	ff cf       	rjmp	.-2      	; 0x17e <main+0x64>

00000180 <__vector_13>:
 180:	1f 92       	push	r1
 
 /* ISR starts when Timer/Counter1 overflows. Toggle D1 LED on 
 * Multi-function shield. */

ISR(TIMER1_OVF_vect)
{
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	
	// Checking button status to control the speed of LEDs
	if(GPIO_read(&PIND,BTN)==1)
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	89 e2       	ldi	r24, 0x29	; 41
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	b2 df       	rcall	.-156    	; 0x10e <GPIO_read>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	49 f4       	brne	.+18     	; 0x1c0 <__vector_13+0x40>
	{
		TIM1_overflow_262ms(); // If button is pressed the state will change after 262ms
 1ae:	e1 e8       	ldi	r30, 0x81	; 129
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8b 7f       	andi	r24, 0xFB	; 251
 1b6:	80 83       	st	Z, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	83 60       	ori	r24, 0x03	; 3
 1bc:	80 83       	st	Z, r24
 1be:	0e c0       	rjmp	.+28     	; 0x1dc <__vector_13+0x5c>
	}
	else if(GPIO_read(&PIND,BTN)==0)
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	89 e2       	ldi	r24, 0x29	; 41
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	a3 df       	rcall	.-186    	; 0x10e <GPIO_read>
 1c8:	81 11       	cpse	r24, r1
 1ca:	08 c0       	rjmp	.+16     	; 0x1dc <__vector_13+0x5c>
	{
		TIM1_overflow_1s();   // If button is not pressed the state will change after 1 second
 1cc:	e1 e8       	ldi	r30, 0x81	; 129
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	8c 7f       	andi	r24, 0xFC	; 252
 1d4:	80 83       	st	Z, r24
 1d6:	80 81       	ld	r24, Z
 1d8:	84 60       	ori	r24, 0x04	; 4
 1da:	80 83       	st	Z, r24
	}
	
	
	 GPIO_toggle(&PORTB, arr[last_count]);  // TURN OFF THE PREVIOUS LED
 1dc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	ef 5f       	subi	r30, 0xFF	; 255
 1e4:	fe 4f       	sbci	r31, 0xFE	; 254
 1e6:	60 81       	ld	r22, Z
 1e8:	85 e2       	ldi	r24, 0x25	; 37
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	84 df       	rcall	.-248    	; 0xf6 <GPIO_toggle>
	 GPIO_toggle(&PORTB, arr[count]);   // TURN ON THE LED (Because it was off)
 1ee:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <count>
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	ef 5f       	subi	r30, 0xFF	; 255
 1f6:	fe 4f       	sbci	r31, 0xFE	; 254
 1f8:	60 81       	ld	r22, Z
 1fa:	85 e2       	ldi	r24, 0x25	; 37
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	7b df       	rcall	.-266    	; 0xf6 <GPIO_toggle>
	 
	 
	 
	 // Deciding the movement of LEDs (forward or backward)
	 if (count == 3) // Checking maximum size 
 200:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <count>
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	21 f4       	brne	.+8      	; 0x210 <__vector_13+0x90>
	 {
		 back =1;  // If it has reached maximum size then LEDs will move backwards
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
 20e:	11 c0       	rjmp	.+34     	; 0x232 <__vector_13+0xb2>
	 }
	 else if (count == 0)  // Checking minimum size
 210:	81 11       	cpse	r24, r1
 212:	03 c0       	rjmp	.+6      	; 0x21a <__vector_13+0x9a>
	 {
		 back =0; // If it has reached minimum size then LEDs will move in forward direction
 214:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 218:	04 c0       	rjmp	.+8      	; 0x222 <__vector_13+0xa2>
	 }
	 
	 
	 
	 // Increasing or decreasing the index of array depending upon its direction
	 if (back == 0) // Direction is forward
 21a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__data_end>
 21e:	91 11       	cpse	r25, r1
 220:	06 c0       	rjmp	.+12     	; 0x22e <__vector_13+0xae>
	 {
		 last_count =count; // Index to turn off the Last LED
 222:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		count++; // Index increasing because of forward direction
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <count>
 22c:	07 c0       	rjmp	.+14     	; 0x23c <__vector_13+0xbc>
	 }
	 else if (back == 1) // Direction is backwards
 22e:	91 30       	cpi	r25, 0x01	; 1
 230:	29 f4       	brne	.+10     	; 0x23c <__vector_13+0xbc>
	 {
		 last_count=count; // Index to turn off the Last LED
 232:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		 count--; // Index decreasing because of backward direction
 236:	81 50       	subi	r24, 0x01	; 1
 238:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <count>
	 }
	 
	 
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
