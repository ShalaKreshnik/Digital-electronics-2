
KnightRiderStyle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000726  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067c  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c4  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b2  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bc  00000000  00000000  00001636  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	//DDRB = DDRB | (1<<LED_GREEN);
	// ...and turn LED off in Data Register
	//PORTB = PORTB & ~(1<<LED_GREEN); // Turn OFF

	/*RED LED*/
	DDRC = DDRC |(1<<LED_GREEN) | (1<<LED_RED) | (1<<LED_RED2) | (1<<LED_BLUE) | (1<<LED_GREEN2); // Outputs
  80:	87 b1       	in	r24, 0x07	; 7
  82:	8f 61       	ori	r24, 0x1F	; 31
  84:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & ~(1<<LED_GREEN); // TURN OFF
  86:	40 98       	cbi	0x08, 0	; 8
	PORTC = PORTC & ~(1<<LED_RED); // Turn OFF
  88:	41 98       	cbi	0x08, 1	; 8
	PORTC = PORTC & ~(1<<LED_RED2); // Turn OFF
  8a:	43 98       	cbi	0x08, 3	; 8
	PORTC = PORTC & ~(1<<LED_BLUE); // Turn OFF
  8c:	42 98       	cbi	0x08, 2	; 8
	PORTC = PORTC & ~(1<<LED_GREEN2); // Turn OFF
  8e:	44 98       	cbi	0x08, 4	; 8
	/*PUSH BUTTON*/
	DDRD = DDRD & ~(1<<BTN); // Input
  90:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BTN); // enable internal pull-up
  92:	58 9a       	sbi	0x0b, 0	; 11

	// Infinite loop
	while (1)
	{
		LED =0;
		back=0;
  94:	10 e0       	ldi	r17, 0x00	; 0
  96:	f1 2c       	mov	r15, r1
		// Pause several milliseconds
		//_delay_ms(BLINK_DELAY);
		while (bit_is_clear(PIND,BTN))
		{
			
			PORTC = PORTC ^ (1<<LED); // TURN ON THE LED
  98:	e1 e0       	ldi	r30, 0x01	; 1
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	ce 2f       	mov	r28, r30
  9e:	bf 2f       	mov	r27, r31
  a0:	a1 2f       	mov	r26, r17
  a2:	3f 2d       	mov	r19, r15

	// Infinite loop
	while (1)
	{
		LED =0;
		back=0;
  a4:	61 2f       	mov	r22, r17
  a6:	7f 2d       	mov	r23, r15
	PORTD = PORTD | (1<<BTN); // enable internal pull-up

	// Infinite loop
	while (1)
	{
		LED =0;
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
		back=0;
		// Pause several milliseconds
		//_delay_ms(BLINK_DELAY);
		while (bit_is_clear(PIND,BTN))
  ac:	2d c0       	rjmp	.+90     	; 0x108 <main+0x88>
		{
			
			PORTC = PORTC ^ (1<<LED); // TURN ON THE LED
  ae:	28 b1       	in	r18, 0x08	; 8
  b0:	cf 01       	movw	r24, r30
  b2:	04 2e       	mov	r0, r20
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x3a>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <main+0x36>
  be:	92 2f       	mov	r25, r18
  c0:	98 27       	eor	r25, r24
  c2:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	0f ef       	ldi	r16, 0xFF	; 255
  c6:	24 e3       	ldi	r18, 0x34	; 52
  c8:	dc e0       	ldi	r29, 0x0C	; 12
  ca:	01 50       	subi	r16, 0x01	; 1
  cc:	20 40       	sbci	r18, 0x00	; 0
  ce:	d0 40       	sbci	r29, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x4a>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x54>
  d4:	00 00       	nop
			_delay_ms(SMALL_DELAY);
			PORTC = PORTC & ~(1<<LED); // TURN OFF THE LED
  d6:	98 b1       	in	r25, 0x08	; 8
  d8:	80 95       	com	r24
  da:	89 23       	and	r24, r25
  dc:	88 b9       	out	0x08, r24	; 8
			if (LED==0) // CHECK FOR PC0
  de:	41 15       	cp	r20, r1
  e0:	51 05       	cpc	r21, r1
  e2:	31 f0       	breq	.+12     	; 0xf0 <main+0x70>
			{
				back =0; // IT HAS TO MOVE FORWARD
			}
			else if (LED == 4)
  e4:	44 30       	cpi	r20, 0x04	; 4
  e6:	51 05       	cpc	r21, r1
  e8:	59 f0       	breq	.+22     	; 0x100 <main+0x80>
			{
				back = 1; // IT HAS TO MOVE BACKWARDS
			}
			if (back == 0)  // MOVING IN FORWARD DIRECTION
  ea:	61 15       	cp	r22, r1
  ec:	71 05       	cpc	r23, r1
  ee:	29 f4       	brne	.+10     	; 0xfa <main+0x7a>
			{
				LED++;
  f0:	4f 5f       	subi	r20, 0xFF	; 255
  f2:	5f 4f       	sbci	r21, 0xFF	; 255
  f4:	6a 2f       	mov	r22, r26
  f6:	73 2f       	mov	r23, r19
  f8:	07 c0       	rjmp	.+14     	; 0x108 <main+0x88>
			}
			else if (back == 1) // MOVING BACKWARDS
  fa:	61 30       	cpi	r22, 0x01	; 1
  fc:	71 05       	cpc	r23, r1
  fe:	21 f4       	brne	.+8      	; 0x108 <main+0x88>
			{
				LED--;
 100:	41 50       	subi	r20, 0x01	; 1
 102:	51 09       	sbc	r21, r1
 104:	6c 2f       	mov	r22, r28
 106:	7b 2f       	mov	r23, r27
	{
		LED =0;
		back=0;
		// Pause several milliseconds
		//_delay_ms(BLINK_DELAY);
		while (bit_is_clear(PIND,BTN))
 108:	48 9b       	sbis	0x09, 0	; 9
 10a:	d1 cf       	rjmp	.-94     	; 0xae <main+0x2e>
 10c:	cb cf       	rjmp	.-106    	; 0xa4 <main+0x24>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
