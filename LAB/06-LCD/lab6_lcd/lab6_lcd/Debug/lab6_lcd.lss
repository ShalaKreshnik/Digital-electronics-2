
lab6_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000006ee  00000782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800154  00800154  000007d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000808  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b2  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000995  00000000  00000000  00001daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092c  00000000  00000000  0000273f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  0000306c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000525  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000996  00000000  00000000  00003795  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000412b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 35       	cpi	r26, 0x5A	; 90
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
 174:	20 9a       	sbi	0x04, 0	; 4
 176:	55 9a       	sbi	0x0a, 5	; 10
 178:	21 9a       	sbi	0x04, 1	; 4
 17a:	54 9a       	sbi	0x0a, 4	; 10
 17c:	55 9a       	sbi	0x0a, 5	; 10
 17e:	56 9a       	sbi	0x0a, 6	; 10
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
 18e:	5d 9a       	sbi	0x0b, 5	; 11
 190:	5c 9a       	sbi	0x0b, 4	; 11
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
 1c2:	5c 98       	cbi	0x0b, 4	; 11
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
 * value on LCD display when 8-bit Timer/Counter2 overflows.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON_CURSOR);
 1f4:	8e e0       	ldi	r24, 0x0E	; 14
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

    // Put string(s) at LCD display
    lcd_gotoxy(COL1, 0); lcd_puts("00:00.0");  // Stopwatch
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 202:	80 e4       	ldi	r24, 0x40	; 64
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	lcd_gotoxy(COL2, 0); lcd_putc('0');		   // Seconds^2
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	8b e0       	ldi	r24, 0x0B	; 11
 20e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 212:	80 e3       	ldi	r24, 0x30	; 48
 214:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_gotoxy(COL1, 1); lcd_putc('b');		   // Progress bar
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 220:	82 e6       	ldi	r24, 0x62	; 98
 222:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_gotoxy(COL2, 1); lcd_putc('c');		   // Rotating text
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	8b e0       	ldi	r24, 0x0B	; 11
 22a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 22e:	83 e6       	ldi	r24, 0x63	; 99
 230:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>

	// Custom character generator
	lcd_command(1 << LCD_CGRAM);
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 23a:	c0 e0       	ldi	r28, 0x00	; 0
 23c:	d1 e0       	ldi	r29, 0x01	; 1
 23e:	00 e4       	ldi	r16, 0x40	; 64
 240:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 8*8; i++)
	{
		lcd_data(customChar[i]); // Storing all new characters to memory line by line
 242:	89 91       	ld	r24, Y+
 244:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	lcd_gotoxy(COL1, 1); lcd_putc('b');		   // Progress bar
	lcd_gotoxy(COL2, 1); lcd_putc('c');		   // Rotating text

	// Custom character generator
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8*8; i++)
 248:	c0 17       	cp	r28, r16
 24a:	d1 07       	cpc	r29, r17
 24c:	d1 f7       	brne	.-12     	; 0x242 <main+0x4e>
	{
		lcd_data(customChar[i]); // Storing all new characters to memory line by line
	}
	
	// Set pointer to beginning of DDRAM memory
	lcd_command(1 << LCD_CGRAM);
 24e:	80 e4       	ldi	r24, 0x40	; 64
 250:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	lcd_gotoxy(COL1, 1);
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(0);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	// spaeter hinzugefuegt
	
	lcd_gotoxy(0,0);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(6);
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 	lcd_gotoxy(8,0); 
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 	lcd_putc(7);
 278:	87 e0       	ldi	r24, 0x07	; 7
 27a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	// Configure 8-bit Timer/Counter0 for Stopwatch
	// Set prescaler and enable overflow interrupt every 16 ms
	
	
	
	TIM0_overflow_16ms();
 27e:	85 b5       	in	r24, 0x25	; 37
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	85 bd       	out	0x25, r24	; 37
 284:	85 b5       	in	r24, 0x25	; 37
 286:	85 60       	ori	r24, 0x05	; 5
 288:	85 bd       	out	0x25, r24	; 37
 	TIM0_overflow_interrupt_enable();  
 28a:	ee e6       	ldi	r30, 0x6E	; 110
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	81 60       	ori	r24, 0x01	; 1
 292:	80 83       	st	Z, r24



    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms
	TIM2_overflow_16ms();
 294:	e1 eb       	ldi	r30, 0xB1	; 177
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	87 60       	ori	r24, 0x07	; 7
 29c:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 29e:	e0 e7       	ldi	r30, 0x70	; 112
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 2a8:	78 94       	sei
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <main+0xb6>

000002ac <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	00 d0       	rcall	.+0      	; 0x2dc <__vector_9+0x30>
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
    static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0; // Tenth of a second
	static uint8_t secs = 0; // Seconds
	static uint8_t mins = 0; // Minutes
	char lcd_string[2] = "00"; // Strings for converting numbers by itoa
 2e0:	80 e3       	ldi	r24, 0x30	; 48
 2e2:	90 e3       	ldi	r25, 0x30	; 48
 2e4:	9a 83       	std	Y+2, r25	; 0x02
 2e6:	89 83       	std	Y+1, r24	; 0x01
	

    number_of_overflows++;
 2e8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <number_of_overflows.1951>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 2ee:	86 30       	cpi	r24, 0x06	; 6
 2f0:	18 f4       	brcc	.+6      	; 0x2f8 <__vector_9+0x4c>
	static uint8_t secs = 0; // Seconds
	static uint8_t mins = 0; // Minutes
	char lcd_string[2] = "00"; // Strings for converting numbers by itoa
	

    number_of_overflows++;
 2f2:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <number_of_overflows.1951>
 2f6:	3b c1       	rjmp	.+630    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 2f8:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <number_of_overflows.1951>

		tens++; // Update tenth of a second
 2fc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <tens.1952>
 300:	8f 5f       	subi	r24, 0xFF	; 255
		if(tens >= 10)
 302:	8a 30       	cpi	r24, 0x0A	; 10
 304:	18 f4       	brcc	.+6      	; 0x30c <__vector_9+0x60>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;

		tens++; // Update tenth of a second
 306:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <tens.1952>
 30a:	20 c1       	rjmp	.+576    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		if(tens >= 10)
		{
			tens = 0;
 30c:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <tens.1952>
			// Updating secs
			secs++;
 310:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 314:	8f 5f       	subi	r24, 0xFF	; 255
 316:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <secs.1953>
			if (secs >31) // Square is of 4 digits (i.e. 32*32 = 1024)
 31a:	80 32       	cpi	r24, 0x20	; 32
 31c:	08 f4       	brcc	.+2      	; 0x320 <__vector_9+0x74>
 31e:	57 c0       	rjmp	.+174    	; 0x3ce <__vector_9+0x122>
			{
				lcd_gotoxy(COL2, 0); lcd_putc(((secs*secs)/1000)+48);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	8b e0       	ldi	r24, 0x0B	; 11
 324:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 328:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 32c:	88 9f       	mul	r24, r24
 32e:	c0 01       	movw	r24, r0
 330:	11 24       	eor	r1, r1
 332:	68 ee       	ldi	r22, 0xE8	; 232
 334:	73 e0       	ldi	r23, 0x03	; 3
 336:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 33a:	80 e3       	ldi	r24, 0x30	; 48
 33c:	86 0f       	add	r24, r22
 33e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
				lcd_gotoxy(COL2+1, 0); lcd_putc((((secs*secs)/100)%10)+48);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	8c e0       	ldi	r24, 0x0C	; 12
 346:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 34a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 34e:	88 9f       	mul	r24, r24
 350:	c0 01       	movw	r24, r0
 352:	11 24       	eor	r1, r1
 354:	0f 2e       	mov	r0, r31
 356:	f4 e6       	ldi	r31, 0x64	; 100
 358:	ef 2e       	mov	r14, r31
 35a:	f1 2c       	mov	r15, r1
 35c:	f0 2d       	mov	r31, r0
 35e:	b7 01       	movw	r22, r14
 360:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 364:	cb 01       	movw	r24, r22
 366:	0a e0       	ldi	r16, 0x0A	; 10
 368:	10 e0       	ldi	r17, 0x00	; 0
 36a:	b8 01       	movw	r22, r16
 36c:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 370:	80 5d       	subi	r24, 0xD0	; 208
 372:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
				lcd_gotoxy(COL2+2, 0); lcd_putc(((((secs*secs)/10)%10)%10)+48);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	8d e0       	ldi	r24, 0x0D	; 13
 37a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 37e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 382:	88 9f       	mul	r24, r24
 384:	c0 01       	movw	r24, r0
 386:	11 24       	eor	r1, r1
 388:	b8 01       	movw	r22, r16
 38a:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 38e:	cb 01       	movw	r24, r22
 390:	b8 01       	movw	r22, r16
 392:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 396:	b8 01       	movw	r22, r16
 398:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 39c:	80 5d       	subi	r24, 0xD0	; 208
 39e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
				lcd_gotoxy(COL2+3, 0); lcd_putc(((((secs*secs)%100)%10)%10)+48);
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	8e e0       	ldi	r24, 0x0E	; 14
 3a6:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 3aa:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 3ae:	88 9f       	mul	r24, r24
 3b0:	c0 01       	movw	r24, r0
 3b2:	11 24       	eor	r1, r1
 3b4:	b7 01       	movw	r22, r14
 3b6:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 3ba:	b8 01       	movw	r22, r16
 3bc:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 3c0:	b8 01       	movw	r22, r16
 3c2:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 3c6:	80 5d       	subi	r24, 0xD0	; 208
 3c8:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 3cc:	6b c0       	rjmp	.+214    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			}
			
			else if(secs>9) // Square is of 3 digits (i.e. 13*13 = 169)
 3ce:	8a 30       	cpi	r24, 0x0A	; 10
 3d0:	c8 f1       	brcs	.+114    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			{
				lcd_gotoxy(COL2, 0); lcd_putc(((secs*secs)/100)+48);
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	8b e0       	ldi	r24, 0x0B	; 11
 3d6:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 3da:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 3de:	88 9f       	mul	r24, r24
 3e0:	c0 01       	movw	r24, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	64 e6       	ldi	r22, 0x64	; 100
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 3ec:	80 e3       	ldi	r24, 0x30	; 48
 3ee:	86 0f       	add	r24, r22
 3f0:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
				lcd_gotoxy(COL2+1, 0); lcd_putc((((secs*secs)/10)%10)+48);
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	8c e0       	ldi	r24, 0x0C	; 12
 3f8:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 3fc:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 400:	88 9f       	mul	r24, r24
 402:	c0 01       	movw	r24, r0
 404:	11 24       	eor	r1, r1
 406:	0a e0       	ldi	r16, 0x0A	; 10
 408:	10 e0       	ldi	r17, 0x00	; 0
 40a:	b8 01       	movw	r22, r16
 40c:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 410:	cb 01       	movw	r24, r22
 412:	b8 01       	movw	r22, r16
 414:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 418:	80 5d       	subi	r24, 0xD0	; 208
 41a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
				lcd_gotoxy(COL2+2, 0); lcd_putc((((secs*secs)%10)%10)+48);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	8d e0       	ldi	r24, 0x0D	; 13
 422:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 426:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 42a:	88 9f       	mul	r24, r24
 42c:	c0 01       	movw	r24, r0
 42e:	11 24       	eor	r1, r1
 430:	b8 01       	movw	r22, r16
 432:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 436:	b8 01       	movw	r22, r16
 438:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 43c:	80 5d       	subi	r24, 0xD0	; 208
 43e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 442:	30 c0       	rjmp	.+96     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			}
			
			else if(secs>3) // Square is of 2 digits (i.e. 4*4 = 16)
 444:	84 30       	cpi	r24, 0x04	; 4
 446:	10 f1       	brcs	.+68     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			{
				lcd_gotoxy(COL2, 0); lcd_putc(((secs*secs)/10)+48);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	8b e0       	ldi	r24, 0x0B	; 11
 44c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 450:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 454:	88 9f       	mul	r24, r24
 456:	c0 01       	movw	r24, r0
 458:	11 24       	eor	r1, r1
 45a:	0a e0       	ldi	r16, 0x0A	; 10
 45c:	10 e0       	ldi	r17, 0x00	; 0
 45e:	b8 01       	movw	r22, r16
 460:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 464:	80 e3       	ldi	r24, 0x30	; 48
 466:	86 0f       	add	r24, r22
 468:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
				lcd_gotoxy(COL2+1, 0); lcd_putc(((secs*secs)%10)+48);
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	8c e0       	ldi	r24, 0x0C	; 12
 470:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 474:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 478:	88 9f       	mul	r24, r24
 47a:	c0 01       	movw	r24, r0
 47c:	11 24       	eor	r1, r1
 47e:	b8 01       	movw	r22, r16
 480:	0e 94 18 03 	call	0x630	; 0x630 <__divmodhi4>
 484:	80 5d       	subi	r24, 0xD0	; 208
 486:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 48a:	0c c0       	rjmp	.+24     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			} 
			
			else
			{
			lcd_gotoxy(COL2, 0); lcd_putc(((secs*secs)+48));
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	8b e0       	ldi	r24, 0x0B	; 11
 490:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 494:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 498:	88 9f       	mul	r24, r24
 49a:	80 2d       	mov	r24, r0
 49c:	11 24       	eor	r1, r1
 49e:	80 5d       	subi	r24, 0xD0	; 208
 4a0:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
			}
			
			if(secs >= 60)
 4a4:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 4a8:	8c 33       	cpi	r24, 0x3C	; 60
 4aa:	c0 f1       	brcs	.+112    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
			{	
				secs = 0;
 4ac:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <secs.1953>
				// Updating minutes
				mins++;
 4b0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <mins.1954>
 4b4:	8f 5f       	subi	r24, 0xFF	; 255
				if(mins >= 60)
 4b6:	8c 33       	cpi	r24, 0x3C	; 60
 4b8:	18 f4       	brcc	.+6      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			
			if(secs >= 60)
			{	
				secs = 0;
				// Updating minutes
				mins++;
 4ba:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <mins.1954>
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				if(mins >= 60)
				{
					mins = 0;
 4c0:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <mins.1954>
				}
				
				// Display minutes
				lcd_gotoxy(COL1, 0);
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				if(mins < 10)
 4cc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <mins.1954>
 4d0:	8a 30       	cpi	r24, 0x0A	; 10
 4d2:	18 f4       	brcc	.+6      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
				{
					lcd_putc('0');
 4d4:	80 e3       	ldi	r24, 0x30	; 48
 4d6:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4da:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <mins.1954>
 4de:	4a e0       	ldi	r20, 0x0A	; 10
 4e0:	be 01       	movw	r22, r28
 4e2:	6f 5f       	subi	r22, 0xFF	; 255
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 40 03 	call	0x680	; 0x680 <__itoa_ncheck>
				}
				itoa(mins, lcd_string, 10);
				lcd_puts(lcd_string);
 4ec:	ce 01       	movw	r24, r28
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				
				//Clearing seconds^2
				lcd_gotoxy(COL2, 0);
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	8b e0       	ldi	r24, 0x0B	; 11
 4f8:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_puts("    ");
 4fc:	8e e4       	ldi	r24, 0x4E	; 78
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				lcd_gotoxy(COL2, 0);
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	8b e0       	ldi	r24, 0x0B	; 11
 508:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_putc(((secs*secs)+48));
 50c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 510:	88 9f       	mul	r24, r24
 512:	80 2d       	mov	r24, r0
 514:	11 24       	eor	r1, r1
 516:	80 5d       	subi	r24, 0xD0	; 208
 518:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
			}
			// Display seconds
			lcd_gotoxy(COL1+3,0);
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			if (secs < 10)
 524:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 528:	8a 30       	cpi	r24, 0x0A	; 10
 52a:	18 f4       	brcc	.+6      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			{
				lcd_putc('0');
 52c:	80 e3       	ldi	r24, 0x30	; 48
 52e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 532:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <secs.1953>
 536:	4a e0       	ldi	r20, 0x0A	; 10
 538:	be 01       	movw	r22, r28
 53a:	6f 5f       	subi	r22, 0xFF	; 255
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 40 03 	call	0x680	; 0x680 <__itoa_ncheck>
			}
			itoa(secs, lcd_string, 10);
			lcd_puts(lcd_string);
 544:	ce 01       	movw	r24, r28
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		}
		
		// Display hundredth of a second
		lcd_gotoxy(COL1+6, 0);
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	87 e0       	ldi	r24, 0x07	; 7
 550:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 554:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <tens.1952>
 558:	4a e0       	ldi	r20, 0x0A	; 10
 55a:	be 01       	movw	r22, r28
 55c:	6f 5f       	subi	r22, 0xFF	; 255
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 40 03 	call	0x680	; 0x680 <__itoa_ncheck>
		
		// Convert cnt0 in decimal to string
		itoa(tens, lcd_string, 10);
		lcd_puts(lcd_string);
 566:	ce 01       	movw	r24, r28
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>

    }
}
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	ff 91       	pop	r31
 578:	ef 91       	pop	r30
 57a:	bf 91       	pop	r27
 57c:	af 91       	pop	r26
 57e:	9f 91       	pop	r25
 580:	8f 91       	pop	r24
 582:	7f 91       	pop	r23
 584:	6f 91       	pop	r22
 586:	5f 91       	pop	r21
 588:	4f 91       	pop	r20
 58a:	3f 91       	pop	r19
 58c:	2f 91       	pop	r18
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

000005a0 <__vector_16>:

ISR (TIMER0_OVF_vect)

{
 5a0:	1f 92       	push	r1
 5a2:	0f 92       	push	r0
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	0f 92       	push	r0
 5a8:	11 24       	eor	r1, r1
 5aa:	2f 93       	push	r18
 5ac:	3f 93       	push	r19
 5ae:	4f 93       	push	r20
 5b0:	5f 93       	push	r21
 5b2:	6f 93       	push	r22
 5b4:	7f 93       	push	r23
 5b6:	8f 93       	push	r24
 5b8:	9f 93       	push	r25
 5ba:	af 93       	push	r26
 5bc:	bf 93       	push	r27
 5be:	ef 93       	push	r30
 5c0:	ff 93       	push	r31
	static uint8_t symbol = 0;
	static uint8_t position = 0;
	
	lcd_gotoxy(COL1 + position, 1);
 5c2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <position.1962>
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	8f 5f       	subi	r24, 0xFF	; 255
 5ca:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(symbol);
 5ce:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 5d2:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>

	symbol++;
 5d6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 5da:	8f 5f       	subi	r24, 0xFF	; 255
	if (symbol >= 6)
 5dc:	86 30       	cpi	r24, 0x06	; 6
 5de:	18 f4       	brcc	.+6      	; 0x5e6 <__vector_16+0x46>
	static uint8_t position = 0;
	
	lcd_gotoxy(COL1 + position, 1);
	lcd_putc(symbol);

	symbol++;
 5e0:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
 5e4:	14 c0       	rjmp	.+40     	; 0x60e <__vector_16+0x6e>
	if (symbol >= 6)
	{
		symbol = 0;
 5e6:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
		// Moving to next position
		position++;
 5ea:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <position.1962>
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
		if (position >= 10)
 5f0:	8a 30       	cpi	r24, 0x0A	; 10
 5f2:	18 f4       	brcc	.+6      	; 0x5fa <__vector_16+0x5a>
	symbol++;
	if (symbol >= 6)
	{
		symbol = 0;
		// Moving to next position
		position++;
 5f4:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <position.1962>
 5f8:	0a c0       	rjmp	.+20     	; 0x60e <__vector_16+0x6e>
		if (position >= 10)
		{
			position = 0;
 5fa:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <position.1962>
			// Clearing progress bar
			lcd_gotoxy(COL1, 1);
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts("          ");
 606:	88 e4       	ldi	r24, 0x48	; 72
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		}
	}
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	bf 91       	pop	r27
 614:	af 91       	pop	r26
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	7f 91       	pop	r23
 61c:	6f 91       	pop	r22
 61e:	5f 91       	pop	r21
 620:	4f 91       	pop	r20
 622:	3f 91       	pop	r19
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <__divmodhi4>:
 630:	97 fb       	bst	r25, 7
 632:	07 2e       	mov	r0, r23
 634:	16 f4       	brtc	.+4      	; 0x63a <__divmodhi4+0xa>
 636:	00 94       	com	r0
 638:	07 d0       	rcall	.+14     	; 0x648 <__divmodhi4_neg1>
 63a:	77 fd       	sbrc	r23, 7
 63c:	09 d0       	rcall	.+18     	; 0x650 <__divmodhi4_neg2>
 63e:	0e 94 2c 03 	call	0x658	; 0x658 <__udivmodhi4>
 642:	07 fc       	sbrc	r0, 7
 644:	05 d0       	rcall	.+10     	; 0x650 <__divmodhi4_neg2>
 646:	3e f4       	brtc	.+14     	; 0x656 <__divmodhi4_exit>

00000648 <__divmodhi4_neg1>:
 648:	90 95       	com	r25
 64a:	81 95       	neg	r24
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	08 95       	ret

00000650 <__divmodhi4_neg2>:
 650:	70 95       	com	r23
 652:	61 95       	neg	r22
 654:	7f 4f       	sbci	r23, 0xFF	; 255

00000656 <__divmodhi4_exit>:
 656:	08 95       	ret

00000658 <__udivmodhi4>:
 658:	aa 1b       	sub	r26, r26
 65a:	bb 1b       	sub	r27, r27
 65c:	51 e1       	ldi	r21, 0x11	; 17
 65e:	07 c0       	rjmp	.+14     	; 0x66e <__udivmodhi4_ep>

00000660 <__udivmodhi4_loop>:
 660:	aa 1f       	adc	r26, r26
 662:	bb 1f       	adc	r27, r27
 664:	a6 17       	cp	r26, r22
 666:	b7 07       	cpc	r27, r23
 668:	10 f0       	brcs	.+4      	; 0x66e <__udivmodhi4_ep>
 66a:	a6 1b       	sub	r26, r22
 66c:	b7 0b       	sbc	r27, r23

0000066e <__udivmodhi4_ep>:
 66e:	88 1f       	adc	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	5a 95       	dec	r21
 674:	a9 f7       	brne	.-22     	; 0x660 <__udivmodhi4_loop>
 676:	80 95       	com	r24
 678:	90 95       	com	r25
 67a:	bc 01       	movw	r22, r24
 67c:	cd 01       	movw	r24, r26
 67e:	08 95       	ret

00000680 <__itoa_ncheck>:
 680:	bb 27       	eor	r27, r27
 682:	4a 30       	cpi	r20, 0x0A	; 10
 684:	31 f4       	brne	.+12     	; 0x692 <__itoa_ncheck+0x12>
 686:	99 23       	and	r25, r25
 688:	22 f4       	brpl	.+8      	; 0x692 <__itoa_ncheck+0x12>
 68a:	bd e2       	ldi	r27, 0x2D	; 45
 68c:	90 95       	com	r25
 68e:	81 95       	neg	r24
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	0c 94 4c 03 	jmp	0x698	; 0x698 <__utoa_common>

00000696 <__utoa_ncheck>:
 696:	bb 27       	eor	r27, r27

00000698 <__utoa_common>:
 698:	fb 01       	movw	r30, r22
 69a:	55 27       	eor	r21, r21
 69c:	aa 27       	eor	r26, r26
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	aa 1f       	adc	r26, r26
 6a4:	a4 17       	cp	r26, r20
 6a6:	10 f0       	brcs	.+4      	; 0x6ac <__utoa_common+0x14>
 6a8:	a4 1b       	sub	r26, r20
 6aa:	83 95       	inc	r24
 6ac:	50 51       	subi	r21, 0x10	; 16
 6ae:	b9 f7       	brne	.-18     	; 0x69e <__utoa_common+0x6>
 6b0:	a0 5d       	subi	r26, 0xD0	; 208
 6b2:	aa 33       	cpi	r26, 0x3A	; 58
 6b4:	08 f0       	brcs	.+2      	; 0x6b8 <__utoa_common+0x20>
 6b6:	a9 5d       	subi	r26, 0xD9	; 217
 6b8:	a1 93       	st	Z+, r26
 6ba:	00 97       	sbiw	r24, 0x00	; 0
 6bc:	79 f7       	brne	.-34     	; 0x69c <__utoa_common+0x4>
 6be:	b1 11       	cpse	r27, r1
 6c0:	b1 93       	st	Z+, r27
 6c2:	11 92       	st	Z+, r1
 6c4:	cb 01       	movw	r24, r22
 6c6:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <strrev>

000006ca <strrev>:
 6ca:	dc 01       	movw	r26, r24
 6cc:	fc 01       	movw	r30, r24
 6ce:	67 2f       	mov	r22, r23
 6d0:	71 91       	ld	r23, Z+
 6d2:	77 23       	and	r23, r23
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <strrev+0x4>
 6d6:	32 97       	sbiw	r30, 0x02	; 2
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <strrev+0x18>
 6da:	7c 91       	ld	r23, X
 6dc:	6d 93       	st	X+, r22
 6de:	70 83       	st	Z, r23
 6e0:	62 91       	ld	r22, -Z
 6e2:	ae 17       	cp	r26, r30
 6e4:	bf 07       	cpc	r27, r31
 6e6:	c8 f3       	brcs	.-14     	; 0x6da <strrev+0x10>
 6e8:	08 95       	ret

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
