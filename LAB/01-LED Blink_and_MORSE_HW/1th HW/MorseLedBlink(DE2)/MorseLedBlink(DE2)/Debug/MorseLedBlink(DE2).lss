
MorseLedBlink(DE2).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d06  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000976  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000415  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f4  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000360  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 89 00 	call	0x112	; 0x112 <main>
  c4:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <dot>:



void dot() // Function whenever it will be called in the main it will perform these three lines of code
{
	PORTB = PORTB | (1<<LED_GREEN); // Turn ON LED PB5
  cc:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	87 e8       	ldi	r24, 0x87	; 135
  d2:	93 e1       	ldi	r25, 0x13	; 19
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <dot+0x8>
  dc:	00 c0       	rjmp	.+0      	; 0xde <dot+0x12>
  de:	00 00       	nop
	_delay_ms(ONE_UNIT_DELAY); // length of dot is one unit
	PORTB = PORTB & ~(1<<LED_GREEN); // Turn OFF LED PB5
  e0:	2d 98       	cbi	0x05, 5	; 5
  e2:	08 95       	ret

000000e4 <dash>:
}

void dash()
{
	PORTB = PORTB | (1<<LED_GREEN); // Turn ON LED PB5
  e4:	2d 9a       	sbi	0x05, 5	; 5
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	87 e9       	ldi	r24, 0x97	; 151
  ea:	9a e3       	ldi	r25, 0x3A	; 58
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <dash+0x8>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <dash+0x12>
  f6:	00 00       	nop
	_delay_ms(THREE_UNITS_DELAY); // length of dash is three units
	PORTB = PORTB & ~(1<<LED_GREEN); // Turn OFF LED PB5
  f8:	2d 98       	cbi	0x05, 5	; 5
  fa:	08 95       	ret

000000fc <space>:
}

void space()
{
	PORTB = PORTB & ~(1<<LED_GREEN); // Turn OFF LED PB5 (SPACE BETWEEN TWO WORDS)
  fc:	2d 98       	cbi	0x05, 5	; 5
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	89 e8       	ldi	r24, 0x89	; 137
 102:	96 e6       	ldi	r25, 0x66	; 102
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <space+0x8>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <space+0x12>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <main>:


int main(void)
{
	// DDRB = DDRB or 0010 0000
	DDRB = DDRB | (1<<LED_GREEN); // Making pin5 of PORTB as an output pin
 112:	25 9a       	sbi	0x04, 5	; 4

	// PORTB = PORTB and 1101 1111
	PORTB = PORTB & ~(1<<LED_GREEN); // Initially storing 0 on PB5
 114:	2d 98       	cbi	0x05, 5	; 5

		/*^^^^^^(DE2 = -.. . ..---)^^^^^^^*/
		

		/*1. Letter "D" -> (-..)*/
		dash();
 116:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	87 e8       	ldi	r24, 0x87	; 135
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0xe>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x18>
 12a:	00 00       	nop
		_delay_ms(ONE_UNIT_DELAY); // length between different parts is one unit
		dot();
 12c:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	87 e8       	ldi	r24, 0x87	; 135
 134:	93 e1       	ldi	r25, 0x13	; 19
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x24>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x2e>
 140:	00 00       	nop
		_delay_ms(ONE_UNIT_DELAY); // length between different parts is one unit
		dot();
 142:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	87 e9       	ldi	r24, 0x97	; 151
 14a:	9a e3       	ldi	r25, 0x3A	; 58
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x3a>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x44>
 156:	00 00       	nop
		_delay_ms(THREE_UNITS_DELAY);
		/* Alphabet “D” completed */

		
		/*2. Letter "E" -> (.)*/
		dot();
 158:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	87 e9       	ldi	r24, 0x97	; 151
 160:	9a e3       	ldi	r25, 0x3A	; 58
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x50>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x5a>
 16c:	00 00       	nop
		_delay_ms(THREE_UNITS_DELAY);
		/* Alphabet “E” completed */

		
		/*2. Number "2" -> (..---)*/
		dot();
 16e:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	87 e8       	ldi	r24, 0x87	; 135
 176:	93 e1       	ldi	r25, 0x13	; 19
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x66>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x70>
 182:	00 00       	nop
		_delay_ms(ONE_UNIT_DELAY); // length between different parts is one unit
		dot();
 184:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	87 e8       	ldi	r24, 0x87	; 135
 18c:	93 e1       	ldi	r25, 0x13	; 19
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x7c>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x86>
 198:	00 00       	nop
		_delay_ms(ONE_UNIT_DELAY); // length between different parts is one unit
		dash();
 19a:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	87 e8       	ldi	r24, 0x87	; 135
 1a2:	93 e1       	ldi	r25, 0x13	; 19
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x92>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x9c>
 1ae:	00 00       	nop
		_delay_ms(ONE_UNIT_DELAY); // length between different parts is one unit
		dash();
 1b0:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	87 e8       	ldi	r24, 0x87	; 135
 1b8:	93 e1       	ldi	r25, 0x13	; 19
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0xa8>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0xb2>
 1c4:	00 00       	nop
		_delay_ms(ONE_UNIT_DELAY); // length between different parts is one unit
		dash();	// NUMBER 2 completed (..---)
 1c6:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	87 e9       	ldi	r24, 0x97	; 151
 1ce:	9a e3       	ldi	r25, 0x3A	; 58
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xbe>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0xc8>
 1da:	00 00       	nop
		_delay_ms(THREE_UNITS_DELAY);
		/* NUMBER “2” completed */
		
		
		// MEDIUM GAP (between words)
		space();
 1dc:	0e 94 7e 00 	call	0xfc	; 0xfc <space>
 1e0:	9a cf       	rjmp	.-204    	; 0x116 <main+0x4>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
