
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  000006ac  00000740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800184  00800184  000007c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000180f  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b19  00000000  00000000  0000214b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b62  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  000037c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e1  00000000  00000000  00003a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c3c  00000000  00000000  00004065  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004ca1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_18>
  4c:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 38       	cpi	r26, 0x84	; 132
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e8       	ldi	r26, 0x84	; 132
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  9e:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_gotoxy>:
 124:	61 11       	cpse	r22, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <lcd_gotoxy+0xc>
 128:	80 58       	subi	r24, 0x80	; 128
 12a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 12e:	08 95       	ret
 130:	80 54       	subi	r24, 0x40	; 64
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret

00000138 <lcd_clrscr>:
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_putc>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 146:	08 95       	ret

00000148 <lcd_puts>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	29 f0       	breq	.+10     	; 0x162 <lcd_puts+0x1a>
 158:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <lcd_puts+0x10>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 16c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 170:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 172:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 174:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 176:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 178:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	99 ef       	ldi	r25, 0xF9	; 249
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x16>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x1c>
 184:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 186:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 188:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x2a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x30>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x3a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x40>
 1a8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x4a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x50>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ba:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x5c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0x62>
 1ca:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1d8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <parity_display>:
// Hex values of every single bit  for example 0b0000000000000010 is defined as(0x0002) and 0b1000000000000000 is defined as (0x8000)
uint16_t arr[16] = { 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
	0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000, 0x8000
};
void parity_display(int a)
{
 1ec:	bc 01       	movw	r22, r24
 1ee:	e0 e0       	ldi	r30, 0x00	; 0
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	40 e2       	ldi	r20, 0x20	; 32
 1f4:	51 e0       	ldi	r21, 0x01	; 1
		
		uint8_t parity_count = 0;
 1f6:	90 e0       	ldi	r25, 0x00	; 0
		
			for (uint16_t i =0; i<16; i++)
			{
				if ((arr[i]&a)!=0)
 1f8:	21 91       	ld	r18, Z+
 1fa:	31 91       	ld	r19, Z+
 1fc:	26 23       	and	r18, r22
 1fe:	37 23       	and	r19, r23
 200:	23 2b       	or	r18, r19
 202:	09 f0       	breq	.+2      	; 0x206 <parity_display+0x1a>
				{
					parity_count++; // counting number of 1s in a value
 204:	9f 5f       	subi	r25, 0xFF	; 255
void parity_display(int a)
{
		
		uint8_t parity_count = 0;
		
			for (uint16_t i =0; i<16; i++)
 206:	e4 17       	cp	r30, r20
 208:	f5 07       	cpc	r31, r21
 20a:	b1 f7       	brne	.-20     	; 0x1f8 <parity_display+0xc>
				{
					parity_count++; // counting number of 1s in a value
				}
				
			}
			if(parity_count == 0) // If the count is 0 (No 1 bit)
 20c:	91 11       	cpse	r25, r1
 20e:	03 c0       	rjmp	.+6      	; 0x216 <parity_display+0x2a>
			{
					parity = 0;
 210:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__data_end>
 214:	08 c0       	rjmp	.+16     	; 0x226 <parity_display+0x3a>
			}
			else if(parity_count%2 == 0) // If sum of 1's is an even number
 216:	90 fd       	sbrc	r25, 0
 218:	04 c0       	rjmp	.+8      	; 0x222 <parity_display+0x36>
			{
				parity = 1;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
 220:	02 c0       	rjmp	.+4      	; 0x226 <parity_display+0x3a>
			}
			
			else if(parity_count%2 == 1) // If the sum of 1's is an odd number
			{
				parity = 0;
 222:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__data_end>
			}
		
			lcd_gotoxy(15, 1); // Parity display location
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_putc(parity+48); // Converting to character
 22e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 232:	80 5d       	subi	r24, 0xD0	; 208
 234:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 238:	08 95       	ret

0000023a <main>:
};

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 23a:	8c e0       	ldi	r24, 0x0C	; 12
 23c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_init>
    lcd_gotoxy(1, 0);  
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts ("value:");
 248:	80 e2       	ldi	r24, 0x20	; 32
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(3, 1);
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts ("key:");
 258:	87 e2       	ldi	r24, 0x27	; 39
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	lcd_gotoxy(8, 1);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts ("none");
 268:	8c e2       	ldi	r24, 0x2C	; 44
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |= (1 << REFS0);
 270:	ec e7       	ldi	r30, 0x7C	; 124
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	80 64       	ori	r24, 0x40	; 64
 278:	80 83       	st	Z, r24
    // Set input channel to ADC0
    ADMUX &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0)); // 0000: ADC0 
 27a:	80 81       	ld	r24, Z
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	80 83       	st	Z, r24
    // Enable ADC module
    ADCSRA |= (1<< ADEN);
 280:	ea e7       	ldi	r30, 0x7A	; 122
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	80 68       	ori	r24, 0x80	; 128
 288:	80 83       	st	Z, r24
    // Enable conversion complete interrupt
    ADCSRA |= (1<<ADEN);
 28a:	80 81       	ld	r24, Z
 28c:	80 68       	ori	r24, 0x80	; 128
 28e:	80 83       	st	Z, r24
    // Set clock prescaler to 128
    ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADIE);
 290:	80 81       	ld	r24, Z
 292:	8f 60       	ori	r24, 0x0F	; 15
 294:	80 83       	st	Z, r24
	
	//ADCSRA |= (1<<ADEN) | (1<<ADATE)  | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 262 ms
    TIM1_overflow_262ms();
 296:	e1 e8       	ldi	r30, 0x81	; 129
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	8b 7f       	andi	r24, 0xFB	; 251
 29e:	80 83       	st	Z, r24
 2a0:	80 81       	ld	r24, Z
 2a2:	83 60       	ori	r24, 0x03	; 3
 2a4:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 2a6:	ef e6       	ldi	r30, 0x6F	; 111
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 2b0:	87 e6       	ldi	r24, 0x67	; 103
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 c4 02 	call	0x588	; 0x588 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 2b8:	78 94       	sei
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <main+0x80>

000002bc <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	8f 93       	push	r24
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
    // Start ADC conversion
    ADCSRA |= (1<< ADSC);
 2cc:	ea e7       	ldi	r30, 0x7A	; 122
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	80 64       	ori	r24, 0x40	; 64
 2d4:	80 83       	st	Z, r24
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	8f 91       	pop	r24
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_21>:
/**
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	2f 93       	push	r18
 2f6:	3f 93       	push	r19
 2f8:	4f 93       	push	r20
 2fa:	5f 93       	push	r21
 2fc:	6f 93       	push	r22
 2fe:	7f 93       	push	r23
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	af 93       	push	r26
 306:	bf 93       	push	r27
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	00 d0       	rcall	.+0      	; 0x312 <__vector_21+0x2c>
 312:	00 d0       	rcall	.+0      	; 0x314 <__vector_21+0x2e>
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
    // WRITE YOUR CODE HERE
    uint16_t value = 0;
    char lcd_string[4] = "0000"; 
 318:	80 e3       	ldi	r24, 0x30	; 48
 31a:	90 e3       	ldi	r25, 0x30	; 48
 31c:	9a 83       	std	Y+2, r25	; 0x02
 31e:	89 83       	std	Y+1, r24	; 0x01
 320:	9c 83       	std	Y+4, r25	; 0x04
 322:	8b 83       	std	Y+3, r24	; 0x03

	// Displaying parity bit of value
	parity_display(value);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 f6 00 	call	0x1ec	; 0x1ec <parity_display>
	
	// Sending data to UART1
	uint8_t c;
	c = uart_getc();
 32c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <uart_getc>
	if(c != '\0')
	{
		if (c == '1')
 330:	81 33       	cpi	r24, 0x31	; 49
 332:	11 f4       	brne	.+4      	; 0x338 <__vector_21+0x52>
		{
		uart_putc(c);
 334:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <uart_putc>
		}
	}

	
    value = ADC;                 // Copy ADC result to 16-bit variable
 338:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 33c:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 340:	4a e0       	ldi	r20, 0x0A	; 10
 342:	be 01       	movw	r22, r28
 344:	6f 5f       	subi	r22, 0xFF	; 255
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	c8 01       	movw	r24, r16
 34a:	0e 94 1f 03 	call	0x63e	; 0x63e <__itoa_ncheck>
	
    itoa(value, lcd_string, 10); //Convert to string in decimal
    lcd_gotoxy(8, 0);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	88 e0       	ldi	r24, 0x08	; 8
 352:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("    ");   
 356:	8b e4       	ldi	r24, 0x4B	; 75
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(8, 0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	88 e0       	ldi	r24, 0x08	; 8
 362:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts(lcd_string);
 366:	ce 01       	movw	r24, r28
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>

    if (value < 700)
 36e:	0c 3b       	cpi	r16, 0xBC	; 188
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	18 07       	cpc	r17, r24
 374:	60 f4       	brcc	.+24     	; 0x38e <__vector_21+0xa8>
    {
		uart_puts("Button was pressed: ");
 376:	81 e3       	ldi	r24, 0x31	; 49
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 10 03 	call	0x620	; 0x620 <uart_puts>
		uart_puts(lcd_string);    
 37e:	ce 01       	movw	r24, r28
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	0e 94 10 03 	call	0x620	; 0x620 <uart_puts>
		uart_puts("\r\n");
 386:	86 e4       	ldi	r24, 0x46	; 70
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 10 03 	call	0x620	; 0x620 <uart_puts>
 38e:	40 e1       	ldi	r20, 0x10	; 16
 390:	be 01       	movw	r22, r28
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	c8 01       	movw	r24, r16
 398:	0e 94 1f 03 	call	0x63e	; 0x63e <__itoa_ncheck>
    }

    itoa(value, lcd_string, 16); //Convert to string in hexa
    lcd_gotoxy(13, 0);
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	8d e0       	ldi	r24, 0x0D	; 13
 3a0:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("    ");
 3a4:	8b e4       	ldi	r24, 0x4B	; 75
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(13, 0);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	8d e0       	ldi	r24, 0x0D	; 13
 3b0:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts(lcd_string);
 3b4:	ce 01       	movw	r24, r28
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	
	
	lcd_gotoxy(8, 1);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	88 e0       	ldi	r24, 0x08	; 8
 3c0:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	if (value == 0) // If the right button was pressed
 3c4:	01 15       	cp	r16, r1
 3c6:	11 05       	cpc	r17, r1
 3c8:	81 f4       	brne	.+32     	; 0x3ea <__vector_21+0x104>
	{
		lcd_puts("      ");
 3ca:	89 e4       	ldi	r24, 0x49	; 73
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
		lcd_gotoxy(8, 1);
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	88 e0       	ldi	r24, 0x08	; 8
 3d6:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
		lcd_puts("Right");
 3da:	80 e5       	ldi	r24, 0x50	; 80
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
		parity_display(value);
 3e2:	c8 01       	movw	r24, r16
 3e4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <parity_display>
 3e8:	26 c0       	rjmp	.+76     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	}
	if (value == 101) // If the right button was pressed
 3ea:	05 36       	cpi	r16, 0x65	; 101
 3ec:	11 05       	cpc	r17, r1
 3ee:	81 f4       	brne	.+32     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		lcd_puts("      ");
 3f0:	89 e4       	ldi	r24, 0x49	; 73
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
		lcd_gotoxy(8, 1);
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	88 e0       	ldi	r24, 0x08	; 8
 3fc:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
		lcd_puts("Up");
 400:	86 e5       	ldi	r24, 0x56	; 86
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
		parity_display(value);
 408:	c8 01       	movw	r24, r16
 40a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <parity_display>
 40e:	27 c0       	rjmp	.+78     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	if (value == 245) // If the right button was pressed
 410:	05 3f       	cpi	r16, 0xF5	; 245
 412:	11 05       	cpc	r17, r1
 414:	81 f4       	brne	.+32     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	{
		lcd_puts("      ");
 416:	89 e4       	ldi	r24, 0x49	; 73
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
		lcd_gotoxy(8, 1);
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	88 e0       	ldi	r24, 0x08	; 8
 422:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
		lcd_puts("Down");
 426:	89 e5       	ldi	r24, 0x59	; 89
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
		parity_display(value);
 42e:	c8 01       	movw	r24, r16
 430:	0e 94 f6 00 	call	0x1ec	; 0x1ec <parity_display>
 434:	28 c0       	rjmp	.+80     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	}
	if (value == 402) // If the right button was pressed
 436:	02 39       	cpi	r16, 0x92	; 146
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	18 07       	cpc	r17, r24
 43c:	81 f4       	brne	.+32     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	{
		lcd_puts("      ");
 43e:	89 e4       	ldi	r24, 0x49	; 73
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
		lcd_gotoxy(8, 1);
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	88 e0       	ldi	r24, 0x08	; 8
 44a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
		lcd_puts("Left");
 44e:	8e e5       	ldi	r24, 0x5E	; 94
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
		parity_display(value);
 456:	c8 01       	movw	r24, r16
 458:	0e 94 f6 00 	call	0x1ec	; 0x1ec <parity_display>
 45c:	17 c0       	rjmp	.+46     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
	}
	if (value == 650) // If the right button was pressed
 45e:	0a 38       	cpi	r16, 0x8A	; 138
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	18 07       	cpc	r17, r24
 464:	81 f4       	brne	.+32     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	{
		lcd_puts("      ");
 466:	89 e4       	ldi	r24, 0x49	; 73
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
		lcd_gotoxy(8, 1);
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	88 e0       	ldi	r24, 0x08	; 8
 472:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
		lcd_puts("Select");
 476:	83 e6       	ldi	r24, 0x63	; 99
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
		parity_display(value);
 47e:	c8 01       	movw	r24, r16
 480:	0e 94 f6 00 	call	0x1ec	; 0x1ec <parity_display>
 484:	03 c0       	rjmp	.+6      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
	}
	
	// Displaying parity data on UART
	if (value < 700)
 486:	0c 3b       	cpi	r16, 0xBC	; 188
 488:	12 40       	sbci	r17, 0x02	; 2
 48a:	68 f4       	brcc	.+26     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
	{
		uart_puts("Parity bit of value is: ");
 48c:	8a e6       	ldi	r24, 0x6A	; 106
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	0e 94 10 03 	call	0x620	; 0x620 <uart_puts>
		uart_putc(parity+48);
 494:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 498:	80 5d       	subi	r24, 0xD0	; 208
 49a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <uart_putc>
		uart_puts("\r\n");
 49e:	86 e4       	ldi	r24, 0x46	; 70
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 10 03 	call	0x620	; 0x620 <uart_puts>
	}
	
}
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 4d8:	1f 92       	push	r1
 4da:	0f 92       	push	r0
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	0f 92       	push	r0
 4e0:	11 24       	eor	r1, r1
 4e2:	2f 93       	push	r18
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	ef 93       	push	r30
 4ea:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 4ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 4f0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 4f4:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 4f6:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <UART_RxHead>
 4fa:	ef 5f       	subi	r30, 0xFF	; 255
 4fc:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 4fe:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <UART_RxTail>
 502:	e9 17       	cp	r30, r25
 504:	39 f0       	breq	.+14     	; 0x514 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 506:	e0 93 87 01 	sts	0x0187, r30	; 0x800187 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	e6 57       	subi	r30, 0x76	; 118
 50e:	fe 4f       	sbci	r31, 0xFE	; 254
 510:	20 83       	st	Z, r18
 512:	01 c0       	rjmp	.+2      	; 0x516 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 514:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 516:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <UART_LastRxError>
 51a:	89 2b       	or	r24, r25
 51c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <UART_LastRxError>
}
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	2f 91       	pop	r18
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	ef 93       	push	r30
 544:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 546:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <UART_TxHead>
 54a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <UART_TxTail>
 54e:	98 17       	cp	r25, r24
 550:	69 f0       	breq	.+26     	; 0x56c <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 552:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <UART_TxTail>
 556:	ef 5f       	subi	r30, 0xFF	; 255
 558:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 55a:	e0 93 88 01 	sts	0x0188, r30	; 0x800188 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	e6 53       	subi	r30, 0x36	; 54
 562:	fe 4f       	sbci	r31, 0xFE	; 254
 564:	80 81       	ld	r24, Z
 566:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 56a:	05 c0       	rjmp	.+10     	; 0x576 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 56c:	e1 ec       	ldi	r30, 0xC1	; 193
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	8f 7d       	andi	r24, 0xDF	; 223
 574:	80 83       	st	Z, r24
    }
}
 576:	ff 91       	pop	r31
 578:	ef 91       	pop	r30
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 588:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <UART_TxHead>
    UART_TxTail = 0;
 58c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <UART_TxTail>
    UART_RxHead = 0;
 590:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <UART_RxHead>
    UART_RxTail = 0;
 594:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 598:	99 23       	and	r25, r25
 59a:	1c f4       	brge	.+6      	; 0x5a2 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 59c:	22 e0       	ldi	r18, 0x02	; 2
 59e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 5a2:	90 78       	andi	r25, 0x80	; 128
 5a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 5a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 5ac:	88 e9       	ldi	r24, 0x98	; 152
 5ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 5b2:	86 e0       	ldi	r24, 0x06	; 6
 5b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 5b8:	08 95       	ret

000005ba <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
 5ba:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <UART_RxHead>
 5be:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <UART_RxTail>
 5c2:	98 17       	cp	r25, r24
 5c4:	a9 f0       	breq	.+42     	; 0x5f0 <uart_getc+0x36>
    {
        return UART_NO_DATA; /* no data available */
    }

    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 5c6:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <UART_RxTail>
 5ca:	9f 5f       	subi	r25, 0xFF	; 255
 5cc:	9f 73       	andi	r25, 0x3F	; 63

    /* get data from receive buffer */
    data        = UART_RxBuf[tmptail];
 5ce:	e9 2f       	mov	r30, r25
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	e6 57       	subi	r30, 0x76	; 118
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 5d8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <UART_LastRxError>

    /* store buffer index */
    UART_RxTail = tmptail;
 5dc:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <UART_RxTail>

    UART_LastRxError = 0;
 5e0:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <UART_LastRxError>
    return (lastRxError << 8) + data;
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	98 2f       	mov	r25, r24
 5e8:	88 27       	eor	r24, r24
 5ea:	82 0f       	add	r24, r18
 5ec:	91 1d       	adc	r25, r1
 5ee:	08 95       	ret
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
    {
        return UART_NO_DATA; /* no data available */
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	91 e0       	ldi	r25, 0x01	; 1
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 5f4:	08 95       	ret

000005f6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 5f6:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <UART_TxHead>
 5fa:	2f 5f       	subi	r18, 0xFF	; 255
 5fc:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 5fe:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <UART_TxTail>
 602:	29 17       	cp	r18, r25
 604:	e1 f3       	breq	.-8      	; 0x5fe <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 606:	e2 2f       	mov	r30, r18
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	e6 53       	subi	r30, 0x36	; 54
 60c:	fe 4f       	sbci	r31, 0xFE	; 254
 60e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 610:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 614:	e1 ec       	ldi	r30, 0xC1	; 193
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	80 62       	ori	r24, 0x20	; 32
 61c:	80 83       	st	Z, r24
 61e:	08 95       	ret

00000620 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	ec 01       	movw	r28, r24
    while (*s)
 626:	88 81       	ld	r24, Y
 628:	88 23       	and	r24, r24
 62a:	31 f0       	breq	.+12     	; 0x638 <uart_puts+0x18>
 62c:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 62e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 632:	89 91       	ld	r24, Y+
 634:	81 11       	cpse	r24, r1
 636:	fb cf       	rjmp	.-10     	; 0x62e <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	08 95       	ret

0000063e <__itoa_ncheck>:
 63e:	bb 27       	eor	r27, r27
 640:	4a 30       	cpi	r20, 0x0A	; 10
 642:	31 f4       	brne	.+12     	; 0x650 <__itoa_ncheck+0x12>
 644:	99 23       	and	r25, r25
 646:	22 f4       	brpl	.+8      	; 0x650 <__itoa_ncheck+0x12>
 648:	bd e2       	ldi	r27, 0x2D	; 45
 64a:	90 95       	com	r25
 64c:	81 95       	neg	r24
 64e:	9f 4f       	sbci	r25, 0xFF	; 255
 650:	0c 94 2b 03 	jmp	0x656	; 0x656 <__utoa_common>

00000654 <__utoa_ncheck>:
 654:	bb 27       	eor	r27, r27

00000656 <__utoa_common>:
 656:	fb 01       	movw	r30, r22
 658:	55 27       	eor	r21, r21
 65a:	aa 27       	eor	r26, r26
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	aa 1f       	adc	r26, r26
 662:	a4 17       	cp	r26, r20
 664:	10 f0       	brcs	.+4      	; 0x66a <__utoa_common+0x14>
 666:	a4 1b       	sub	r26, r20
 668:	83 95       	inc	r24
 66a:	50 51       	subi	r21, 0x10	; 16
 66c:	b9 f7       	brne	.-18     	; 0x65c <__utoa_common+0x6>
 66e:	a0 5d       	subi	r26, 0xD0	; 208
 670:	aa 33       	cpi	r26, 0x3A	; 58
 672:	08 f0       	brcs	.+2      	; 0x676 <__utoa_common+0x20>
 674:	a9 5d       	subi	r26, 0xD9	; 217
 676:	a1 93       	st	Z+, r26
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	79 f7       	brne	.-34     	; 0x65a <__utoa_common+0x4>
 67c:	b1 11       	cpse	r27, r1
 67e:	b1 93       	st	Z+, r27
 680:	11 92       	st	Z+, r1
 682:	cb 01       	movw	r24, r22
 684:	0c 94 44 03 	jmp	0x688	; 0x688 <strrev>

00000688 <strrev>:
 688:	dc 01       	movw	r26, r24
 68a:	fc 01       	movw	r30, r24
 68c:	67 2f       	mov	r22, r23
 68e:	71 91       	ld	r23, Z+
 690:	77 23       	and	r23, r23
 692:	e1 f7       	brne	.-8      	; 0x68c <strrev+0x4>
 694:	32 97       	sbiw	r30, 0x02	; 2
 696:	04 c0       	rjmp	.+8      	; 0x6a0 <strrev+0x18>
 698:	7c 91       	ld	r23, X
 69a:	6d 93       	st	X+, r22
 69c:	70 83       	st	Z, r23
 69e:	62 91       	ld	r22, -Z
 6a0:	ae 17       	cp	r26, r30
 6a2:	bf 07       	cpc	r27, r31
 6a4:	c8 f3       	brcs	.-14     	; 0x698 <strrev+0x10>
 6a6:	08 95       	ret

000006a8 <_exit>:
 6a8:	f8 94       	cli

000006aa <__stop_program>:
 6aa:	ff cf       	rjmp	.-2      	; 0x6aa <__stop_program>
