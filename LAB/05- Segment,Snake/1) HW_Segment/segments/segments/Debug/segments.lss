
segments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000003da  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800118  00800118  00000486  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eaa  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b1  00000000  00000000  00001462  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ef  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000512  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000050a  00000000  00000000  00002af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002ffc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num); //Clear bit (and not)
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	 *reg_name = *reg_name | (1<<pin_num); // Set bit (or)
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SEG_init>

    // Test of SSD: display number '3' at position 0

    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	TIM1_overflow_1s ();
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8c 7f       	andi	r24, 0xFC	; 252
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	84 60       	ori	r24, 0x04	; 4
 102:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable ();
 104:	ef e6       	ldi	r30, 0x6F	; 111
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	80 83       	st	Z, r24

	/* Configure 8-bit Timer/Counter0
     * Set prescaler and enable overflow interrupt */
	TIM0_overflow_4ms ();
 10e:	85 b5       	in	r24, 0x25	; 37
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	85 bd       	out	0x25, r24	; 37
 114:	85 b5       	in	r24, 0x25	; 37
 116:	84 60       	ori	r24, 0x04	; 4
 118:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable ();
 11a:	ee e6       	ldi	r30, 0x6E	; 110
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
	
	PCINT9_Enable();
 124:	ec e6       	ldi	r30, 0x6C	; 108
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
	PCINT_interrupt_enable();
 12e:	e8 e6       	ldi	r30, 0x68	; 104
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
	
    // Enables interrupts by setting the global interrupt mask
	sei();
 138:	78 94       	sei
 13a:	ff cf       	rjmp	.-2      	; 0x13a <main+0x4a>

0000013c <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */
ISR(TIMER1_OVF_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
    // WRITE YOUR CODE HERE
	cnt0++;
 148:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <cnt0>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (cnt0 >= 10) // Reached 10 seconds
 14e:	8a 30       	cpi	r24, 0x0A	; 10
 150:	18 f4       	brcc	.+6      	; 0x158 <__vector_13+0x1c>
 * value and display it on SSD.
 */
ISR(TIMER1_OVF_vect)
{
    // WRITE YOUR CODE HERE
	cnt0++;
 152:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <cnt0>
 156:	07 c0       	rjmp	.+14     	; 0x166 <__vector_13+0x2a>
	
	if (cnt0 >= 10) // Reached 10 seconds
	{
		cnt0 = 0;
 158:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <cnt0>
		cnt1++;
 15c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cnt1>
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <cnt1>
	}
	if (cnt1 >= 6) // If the stopwatch has reached 60 seconds
 166:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cnt1>
 16a:	86 30       	cpi	r24, 0x06	; 6
 16c:	48 f0       	brcs	.+18     	; 0x180 <__vector_13+0x44>
	{
		cnt0 = 0; // Decimal value 0
 16e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <cnt0>
		cnt1 = 0; // Ten value 0 (Ten value of seconds)
 172:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cnt1>
		cnt2++; // Increase in minute (60 seconds has passed)
 176:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cnt2>
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <cnt2>
	}
	if (cnt2 >= 10) // If 10 minute have passed
 180:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cnt2>
 184:	8a 30       	cpi	r24, 0x0A	; 10
 186:	58 f0       	brcs	.+22     	; 0x19e <__vector_13+0x62>
	{
		cnt0 = 0; 
 188:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <cnt0>
		cnt1 = 0;
 18c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cnt1>
		cnt2 = 0; // Decimal value of minutes = 0
 190:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <cnt2>
		cnt3++; // Ten value of minutes increased 
 194:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <cnt3>
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <cnt3>
	}
	if (cnt3 >= 6) // IF 60 minutes have passed
 19e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <cnt3>
 1a2:	86 30       	cpi	r24, 0x06	; 6
 1a4:	40 f0       	brcs	.+16     	; 0x1b6 <__vector_13+0x7a>
	{
		// INITIALIZE THE COMPLETE WATCH STORE 00.00
		cnt0 = 0; 
 1a6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <cnt0>
		cnt1 = 0;
 1aa:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cnt1>
		cnt2 = 0;
 1ae:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <cnt2>
		cnt3 = 0;
 1b2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <cnt3>
	}
}
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	if (pos == 0)
 1e4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 1e8:	81 11       	cpse	r24, r1
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <__vector_16+0x3c>
	{
		SEG_update_shift_regs(cnt0, pos); 
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <cnt0>
 1f2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SEG_update_shift_regs>
		pos = 1; // Ready to move to second SSD
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 1fc:	1f c0       	rjmp	.+62     	; 0x23c <__vector_16+0x7a>
	}
	else if (pos == 1)
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	49 f4       	brne	.+18     	; 0x214 <__vector_16+0x52>
	{
		SEG_update_shift_regs(cnt1, pos);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cnt1>
 208:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SEG_update_shift_regs>
		pos = 2; // Position changed to third SSD
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 212:	14 c0       	rjmp	.+40     	; 0x23c <__vector_16+0x7a>
	}
	else if (pos == 2)
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	49 f4       	brne	.+18     	; 0x22a <__vector_16+0x68>
	{
		SEG_update_shift_regs(cnt2, pos);
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cnt2>
 21e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SEG_update_shift_regs>
		pos = 3; // POSITION CHANGED TO 4TH SSD
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 228:	09 c0       	rjmp	.+18     	; 0x23c <__vector_16+0x7a>
	}
	else if (pos == 3)
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	39 f4       	brne	.+14     	; 0x23c <__vector_16+0x7a>
	{
		SEG_update_shift_regs(cnt3, pos);
 22e:	63 e0       	ldi	r22, 0x03	; 3
 230:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <cnt3>
 234:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SEG_update_shift_regs>
		pos = 0; // POSITION CHANGED TO FIRST SSD
 238:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
	}
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_4>:

ISR (PCINT1_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	4f 93       	push	r20
 26e:	5f 93       	push	r21
 270:	6f 93       	push	r22
 272:	7f 93       	push	r23
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	af 93       	push	r26
 27a:	bf 93       	push	r27
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
		SEG_clear(); // CLEAR SSD FUNCTION
 280:	0e 94 e7 01 	call	0x3ce	; 0x3ce <SEG_clear>
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	8a e2       	ldi	r24, 0x2A	; 42
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 2b0:	67 e0       	ldi	r22, 0x07	; 7
 2b2:	8a e2       	ldi	r24, 0x2A	; 42
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	84 e2       	ldi	r24, 0x24	; 36
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 2c4:	08 95       	ret

000002c6 <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	c8 2f       	mov	r28, r24
	   uint8_t bit_number;
	if (clear_flag == 0) // iF CLEAR CALL HAS NOT BEEN MADE
 2ce:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <clear_flag>
 2d2:	81 11       	cpse	r24, r1
 2d4:	0e c0       	rjmp	.+28     	; 0x2f2 <SEG_update_shift_regs+0x2c>
	{
	if (position == 2) // Third ssd
 2d6:	62 30       	cpi	r22, 0x02	; 2
 2d8:	31 f4       	brne	.+12     	; 0x2e6 <SEG_update_shift_regs+0x20>
	{
		segments = segment_value_pos_3[segments]; // 0, 1, ..., 9
 2da:	ec 2f       	mov	r30, r28
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	ec 5f       	subi	r30, 0xFC	; 252
 2e0:	fe 4f       	sbci	r31, 0xFE	; 254
 2e2:	c0 81       	ld	r28, Z
 2e4:	09 c0       	rjmp	.+18     	; 0x2f8 <SEG_update_shift_regs+0x32>
	}
	else
	{
		segments = segment_value[segments];	    // 0, 1, ..., 9
 2e6:	ec 2f       	mov	r30, r28
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	e2 5f       	subi	r30, 0xF2	; 242
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	c0 81       	ld	r28, Z
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <SEG_update_shift_regs+0x32>
	}
	}
	
	else if (clear_flag == 1) // IF CLEAR CALL HAS BEEN MADE
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <SEG_update_shift_regs+0x32>
	{
		segments = OFF;	// TURN OFF THE SEGMENTS
 2f6:	cf ef       	ldi	r28, 0xFF	; 255
	}
	
	 position = segment_position[position];  // 0, 1, 2, 3
 2f8:	e6 2f       	mov	r30, r22
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	e0 50       	subi	r30, 0x00	; 0
 2fe:	ff 4f       	sbci	r31, 0xFF	; 255
 300:	10 81       	ld	r17, Z
    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEGMENT_LATCH);  // LATCH
 302:	64 e0       	ldi	r22, 0x04	; 4
 304:	8b e2       	ldi	r24, 0x2B	; 43
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);    // CLK
 30c:	67 e0       	ldi	r22, 0x07	; 7
 30e:	8b e2       	ldi	r24, 0x2B	; 43
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);   // DATA
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	85 e2       	ldi	r24, 0x25	; 37
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	85 e0       	ldi	r24, 0x05	; 5
 322:	8a 95       	dec	r24
 324:	f1 f7       	brne	.-4      	; 0x322 <SEG_update_shift_regs+0x5c>
 326:	00 00       	nop
 328:	d8 e0       	ldi	r29, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {           
		// Output DATA value (bit 0of "segments")		
		if ((segments % 2) == 0)  // LSB is 0 
 32a:	c0 fd       	sbrc	r28, 0
 32c:	06 c0       	rjmp	.+12     	; 0x33a <SEG_update_shift_regs+0x74>
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	85 e2       	ldi	r24, 0x25	; 37
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 338:	05 c0       	rjmp	.+10     	; 0x344 <SEG_update_shift_regs+0x7e>
		else
			GPIO_write_high (&PORTB, SEGMENT_DATA);
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	85 e2       	ldi	r24, 0x25	; 37
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 344:	85 e0       	ldi	r24, 0x05	; 5
 346:	8a 95       	dec	r24
 348:	f1 f7       	brne	.-4      	; 0x346 <SEG_update_shift_regs+0x80>
 34a:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK); 
 34c:	67 e0       	ldi	r22, 0x07	; 7
 34e:	8b e2       	ldi	r24, 0x2B	; 43
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <SEG_update_shift_regs+0x92>
 35c:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK); 
 35e:	67 e0       	ldi	r22, 0x07	; 7
 360:	8b e2       	ldi	r24, 0x2B	; 43
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 368:	c6 95       	lsr	r28
 36a:	d1 50       	subi	r29, 0x01	; 1
    // Wait 1 us
	_delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 36c:	f1 f6       	brne	.-68     	; 0x32a <SEG_update_shift_regs+0x64>
 36e:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
	
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
       if ((position % 2) == 0)  // LSB is 0
 370:	10 fd       	sbrc	r17, 0
 372:	06 c0       	rjmp	.+12     	; 0x380 <SEG_update_shift_regs+0xba>
			 GPIO_write_low(&PORTB, SEGMENT_DATA);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	85 e2       	ldi	r24, 0x25	; 37
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 37e:	05 c0       	rjmp	.+10     	; 0x38a <SEG_update_shift_regs+0xc4>
       else
			 GPIO_write_high(&PORTB, SEGMENT_DATA);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	85 e2       	ldi	r24, 0x25	; 37
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 38a:	85 e0       	ldi	r24, 0x05	; 5
 38c:	8a 95       	dec	r24
 38e:	f1 f7       	brne	.-4      	; 0x38c <SEG_update_shift_regs+0xc6>
 390:	00 00       	nop
       // Wait 1 us
       _delay_us(1);
       // Pull CLK high
       GPIO_write_high(&PORTD, SEGMENT_CLK);
 392:	67 e0       	ldi	r22, 0x07	; 7
 394:	8b e2       	ldi	r24, 0x2B	; 43
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 39c:	85 e0       	ldi	r24, 0x05	; 5
 39e:	8a 95       	dec	r24
 3a0:	f1 f7       	brne	.-4      	; 0x39e <SEG_update_shift_regs+0xd8>
 3a2:	00 00       	nop
       // Wait 1 us
       _delay_us(1);
       // Pull CLK low
       GPIO_write_low(&PORTD, SEGMENT_CLK);
 3a4:	67 e0       	ldi	r22, 0x07	; 7
 3a6:	8b e2       	ldi	r24, 0x2B	; 43
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
       // Shift "position"
       position = position >> 1;
 3ae:	16 95       	lsr	r17
 3b0:	c1 50       	subi	r28, 0x01	; 1
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
	
    for (bit_number = 0; bit_number < 8; bit_number++)
 3b2:	f1 f6       	brne	.-68     	; 0x370 <SEG_update_shift_regs+0xaa>
       // Shift "position"
       position = position >> 1;
    }
	
    // Pull LATCH high
	GPIO_write_high(&PORTD, SEGMENT_LATCH);  // LATCH
 3b4:	64 e0       	ldi	r22, 0x04	; 4
 3b6:	8b e2       	ldi	r24, 0x2B	; 43
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 3be:	85 e0       	ldi	r24, 0x05	; 5
 3c0:	8a 95       	dec	r24
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <SEG_update_shift_regs+0xfa>
 3c4:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
	
}
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	08 95       	ret

000003ce <SEG_clear>:
/*--------------------------------------------------------------------*/
/* SEG_clear */

void SEG_clear()
{
	clear_flag = 1; // Will be used to TURN OFF ALL THE SEGMENTS (NO SEGMENT WILL BE ON)
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <clear_flag>
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
