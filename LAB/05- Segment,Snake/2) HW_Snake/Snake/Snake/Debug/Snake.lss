
Snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000298  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dec  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087d  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f3  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000509  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f4  00000000  00000000  00002721  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002b15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 4a 01 	jmp	0x294	; 0x294 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
  f0:	0e 94 c7 00 	call	0x18e	; 0x18e <SEG_init>
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cnt0>
  fa:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SEG_update_shift_regs>
  fe:	e1 e8       	ldi	r30, 0x81	; 129
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	80 83       	st	Z, r24
 108:	80 81       	ld	r24, Z
 10a:	83 60       	ori	r24, 0x03	; 3
 10c:	80 83       	st	Z, r24
 10e:	ef e6       	ldi	r30, 0x6F	; 111
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 83       	st	Z, r24
 118:	78 94       	sei
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0x2a>

0000011c <__vector_13>:
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
 13e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cnt0>
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cnt0>
 148:	84 30       	cpi	r24, 0x04	; 4
 14a:	21 f4       	brne	.+8      	; 0x154 <__vector_13+0x38>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 152:	06 c0       	rjmp	.+12     	; 0x160 <__vector_13+0x44>
 154:	88 30       	cpi	r24, 0x08	; 8
 156:	20 f0       	brcs	.+8      	; 0x160 <__vector_13+0x44>
 158:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cnt0>
 15c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 160:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__data_end>
 164:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cnt0>
 168:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SEG_update_shift_regs>
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	8a e2       	ldi	r24, 0x2A	; 42
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 198:	67 e0       	ldi	r22, 0x07	; 7
 19a:	8a e2       	ldi	r24, 0x2A	; 42
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	84 e2       	ldi	r24, 0x24	; 36
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 1ac:	08 95       	ret

000001ae <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
    uint8_t bit_number;

	 segments = segment_value[segments];	 // 0, 1, ..., 9
 1b4:	e8 2f       	mov	r30, r24
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ec 5f       	subi	r30, 0xFC	; 252
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	10 81       	ld	r17, Z
	 position = segment_position[position];  // 0, 1, 2, 3
 1be:	e6 2f       	mov	r30, r22
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	d0 81       	ld	r29, Z
    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEGMENT_LATCH);  // LATCH
 1c8:	64 e0       	ldi	r22, 0x04	; 4
 1ca:	8b e2       	ldi	r24, 0x2B	; 43
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);    // CLK
 1d2:	67 e0       	ldi	r22, 0x07	; 7
 1d4:	8b e2       	ldi	r24, 0x2B	; 43
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);   // DATA
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	85 e2       	ldi	r24, 0x25	; 37
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	85 e0       	ldi	r24, 0x05	; 5
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <SEG_update_shift_regs+0x3a>
 1ec:	00 00       	nop
 1ee:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {           
		// Output DATA value (bit 0of "segments")		
		if ((segments % 2) == 0)  // LSB is 0 
 1f0:	10 fd       	sbrc	r17, 0
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <SEG_update_shift_regs+0x52>
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	85 e2       	ldi	r24, 0x25	; 37
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <SEG_update_shift_regs+0x5c>
		else
			GPIO_write_high (&PORTB, SEGMENT_DATA);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	85 e2       	ldi	r24, 0x25	; 37
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <SEG_update_shift_regs+0x5e>
 210:	00 00       	nop
		// Wait 1 us
		_delay_us(1);		
        // Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK); 
 212:	67 e0       	ldi	r22, 0x07	; 7
 214:	8b e2       	ldi	r24, 0x2B	; 43
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <SEG_update_shift_regs+0x70>
 222:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK); 
 224:	67 e0       	ldi	r22, 0x07	; 7
 226:	8b e2       	ldi	r24, 0x2B	; 43
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 22e:	16 95       	lsr	r17
 230:	c1 50       	subi	r28, 0x01	; 1
    // Wait 1 us
	_delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 232:	f1 f6       	brne	.-68     	; 0x1f0 <SEG_update_shift_regs+0x42>
 234:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
	
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
       if ((position % 2) == 0)  // LSB is 0
 236:	d0 fd       	sbrc	r29, 0
 238:	06 c0       	rjmp	.+12     	; 0x246 <SEG_update_shift_regs+0x98>
			 GPIO_write_low(&PORTB, SEGMENT_DATA);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	85 e2       	ldi	r24, 0x25	; 37
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 244:	05 c0       	rjmp	.+10     	; 0x250 <SEG_update_shift_regs+0xa2>
       else
			 GPIO_write_high(&PORTB, SEGMENT_DATA);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	85 e2       	ldi	r24, 0x25	; 37
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	8a 95       	dec	r24
 254:	f1 f7       	brne	.-4      	; 0x252 <SEG_update_shift_regs+0xa4>
 256:	00 00       	nop
       // Wait 1 us
       _delay_us(1);
       // Pull CLK high
       GPIO_write_high(&PORTD, SEGMENT_CLK);
 258:	67 e0       	ldi	r22, 0x07	; 7
 25a:	8b e2       	ldi	r24, 0x2B	; 43
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	8a 95       	dec	r24
 266:	f1 f7       	brne	.-4      	; 0x264 <SEG_update_shift_regs+0xb6>
 268:	00 00       	nop
       // Wait 1 us
       _delay_us(1);
       // Pull CLK low
       GPIO_write_low(&PORTD, SEGMENT_CLK);
 26a:	67 e0       	ldi	r22, 0x07	; 7
 26c:	8b e2       	ldi	r24, 0x2B	; 43
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
       // Shift "position"
       position = position >> 1;
 274:	d6 95       	lsr	r29
 276:	c1 50       	subi	r28, 0x01	; 1
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
	
    for (bit_number = 0; bit_number < 8; bit_number++)
 278:	f1 f6       	brne	.-68     	; 0x236 <SEG_update_shift_regs+0x88>
       // Shift "position"
       position = position >> 1;
    }
	
    // Pull LATCH high
	GPIO_write_high(&PORTD, SEGMENT_LATCH);  // LATCH
 27a:	64 e0       	ldi	r22, 0x04	; 4
 27c:	8b e2       	ldi	r24, 0x2B	; 43
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 284:	85 e0       	ldi	r24, 0x05	; 5
 286:	8a 95       	dec	r24
 288:	f1 f7       	brne	.-4      	; 0x286 <SEG_update_shift_regs+0xd8>
 28a:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	08 95       	ret

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
